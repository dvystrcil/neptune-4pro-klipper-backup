[mcu Awd_Sync]  
serial: /dev/serial/by-id/usb-Klipper_rp2040_E66368254F3F4F24-if00

[temperature_sensor Awd_Sync_Mcu]
sensor_type: temperature_mcu 
sensor_mcu: Awd_Sync 
min_temp: 10 
max_temp: 100 

[temperature_probe Awd_Sync]
sensor_type: Generic 3950
sensor_pin: Awd_Sync:gpio26

[adxl345 awdsync]  
cs_pin: Awd_Sync:gpio9
spi_software_sclk_pin: Awd_Sync:gpio10
spi_software_mosi_pin: Awd_Sync:gpio11
spi_software_miso_pin: Awd_Sync:gpio12


[resonance_tester]
accel_chip: adxl345 awdsync
probe_points:
    # Somewhere slightly above the middle of your print bed
    117.5,117.5,20
hz_per_sec: 1
min_freq: 10
max_freq: 140
move_speed: 50
sweeping_accel: 200
sweeping_period: 1.2


[motors_sync]
axes: y
#    Axes on which calibration will be performed.
accel_chip: adxl345 awdsync
#    Accelerometer for vibrations collection: adxl345 / mpu9250 etc.
#encoder_chip_y: stepper_y,stepper_y1
#    Axis, assigned encoder name, for measuring deviations.
#chip_filter: median
#    Filter type for data from the accelerometer: 'median' works well in
#    most cases, but some particularly noisy printers (fans, etc.) may
#    require a more powerful filter - 'kalman'. On lis2dw filters disabled.
#median_size: 3
#    Median filter window size.
#kalman_coeffs: 1.1, 1., 1e-1, 1e-2, .5, 1.
#    Simple coefficients describing the kalman filter.
microsteps: 16
#    Maximum microstepping displacement of the stepper motor rotor.
#sync_method: default
#    Methods for synchronizing two axes on interconnected kinematics:
#    'alternately' - the axes calibrated alternately, step by step. (default)
#    'synchronous' - the axes calibrated depending on their magnitude,
#    trying to keep it at the same level.
#    Methods for synchronizing axis/axes on NOT-interconnected kinematics:
#    'sequential' - axes are calibrated sequentially. (default)
#steps_model: linear, 20000, 0
#    Mathematical model and its coefficients representing the dependence
#    of stepper motor microstep displacement on the measured magnitude.
#max_step_size: 3
#    The maximum number of microsteps that the motor can take move at time,
#    to achieve the planned magnitude.
#axes_steps_diff: 4
#    The difference in the positions of the motors in microsteps between
#    the two axes, to update the magnitude of the secondary axis. It is
#    used in the synchronous method, or in the process of axis alignment
#    in the alternately method. The typical value is max_step_size + 1.
#retry_tolerance: 0
#    The forced threshold to which a pair of stepper motors on one belt
#    will have to lower the magnitude of the oscillations. It's recommended
#    to configure in order to filter possible inaccuracies. After several
#    iterations of starting synchronization, you will find the edge, to
#    which this parameter should be omitted.
#retries: 0
#    The maximum number of repetitions to achieve the forced threshold of
#    oscillations.
#head_fan:
#    Toolhead fan, which will be turned off during sync to eliminate noise.

[gcode_macro AWD_SYNC]
description: Remember to move the bed to the center and loosen the front stepper pulley grub screws 
gcode:
    G28 X Y
    {% if not printer.motors_sync.applied %}
        SYNC_MOTORS
    {% endif %}
    G28 Z

[gcode_macro AWD_SYNC_MANUAL]
description: Remember to move the bed to the center and loosen the front stepper pulley grub screws 
gcode:
    {% set iterations = params.ITERATIONS|default(4)|int %}
    {% set p_time = params.PAUSE_TIME|default(0)|int %}
  
    {% for i in range(iterations) %}
      SET_KINEMATIC_POSITION X=117 Y=117 Z=20 
      G91
      ### Moving to full step motor position
      G1 X0.1 Y0.1 Z0.025
      
      G1 X0.02 Y0.02 Z0.05
      G1 X-0.02 Y-0.02 Z-0.05
      {% if i < (iterations-1) %}
        M84
      {% endif %}
      G4 P500
      {% if i == 1 %}
        G4 P{1000*p_time}
      {% endif %}
    {% endfor %}
    G90
