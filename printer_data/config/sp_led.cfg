[neopixel _MMU_Lights]
pin: PICO_MMU: PD3
chain_count: 4
color_order: GRB

[gcode_macro _SP_NOTIFY]
gcode:
    {% set action = params.ACTION|default("")|string %}
    {% set lane = params.LANE|default(printer.save_variables.variables.last_loaded_lane)|default(-1)|int %}
    {% set complete = params.COMPLETE|default(1)|int %}
    {% set error = params.ERROR|default(0)|int %}
    {% set sp = printer["gcode_macro _SP_VARS"] %}
    
    {% if sp.debug == 1 %}
      M118 { rawparams }
    {% endif %}
    
    _SP_LED_ACTIONS ACTION={ action } LANE={ lane } COMPLETE={ complete } ERROR={ error }

[gcode_macro _SP_VARS]
variable_debug: 1
# LED mapping per lane
variable_null_color: "OFF"	
variable_led_map: {
    -1: [0],   # NO LANE
    0: [4],    # LANE 0
    1: [3],    # LANE 1
    2: [2],    # LANE 2
    3: [1]     # GUEST LANE
 }
	
gcode:

[gcode_macro _SP_LED_ACTIONS]
gcode:
    {% set action = params.ACTION|default("")|string %}
    {% set lane = params.LANE|default(printer.save_variables.variables.last_loaded_lane)|default(-1)|int %}
    {% set complete = params.COMPLETE|default(1)|int %}
    {% set error = params.ERROR|default(0)|int %}
    {% set sp = printer["gcode_macro _SP_VARS"] %}

    # Define colors (brightness values from 0.0 to 1.0)
    {% set COLORS = {
        "GREEN": {"r": 0.0, "g": 1.0, "b": 0.0},
        "BLUE": {"r": 0.0, "g": 0.0, "b": 1.0},
        "YELLOW": {"r": 1.0, "g": 1.0, "b": 0.0},
        "RED": {"r": 1.0, "g": 0.0, "b": 0.0},
        "PURPLE": {"r": 1.0, "g": 0.0, "b": 1.0},
        "OFF": {"r": 0.0, "g": 0.0, "b": 0.0},
        "WHITE": {"r": 0.1, "g": 0.1, "b": 0.1}
    } %}

    # Get LED array for the current lane (Lane 3 has no dedicated LEDs)
    {% set led_indices = sp.led_map.get(lane, []) %}
    {% set prev_lane = printer.save_variables.variables.previous_lane|default(-1)|int %}
    {% set prev_led_indices = sp.led_map.get(prev_lane, []) %}

    # Helper to set an LED color with validation
    {% macro set_led(index, color) -%}
      {% if index >= 1 %}
        SET_LED LED=_MMU_Lights RED={ color.r } GREEN={ color.g } BLUE={ color.b } INDEX={ index }
      {% endif %}
    {%- endmacro %}

    # Helper to set all LEDs for a lane
    {% macro set_lane_leds(indices, color) -%}
      {% for index in indices %}
        { set_led(index, color) }
      {% endfor %}
    {%- endmacro %}

    # Helper to set all LEDs across all lanes
    {% macro set_all_leds(color) -%}
      {% for indices in sp.led_map.values() %}
        {% for index in indices %}
          { set_led(index, color) }
        {% endfor %}
      {% endfor %}
    {%- endmacro %}

    # Error handling: Blink all LEDs red 10 times
  {% if error == 1 %}
    # Error handling: Blink all LEDs red 10 times
    {% for _ in range(10) %}
        { set_all_leds(COLORS["RED"]) }
        G4 P250
        { set_all_leds(COLORS["OFF"]) }
        G4 P250
    {% endfor %}
    { set_all_leds(COLORS["RED"]) }

    # New handling for lane -1
    {% elif lane == -1 %}
      { set_all_leds(COLORS[sp.null_color]) }  # Light up all LEDs to white
      { set_lane_leds(led_indices, COLORS["GREEN"]) }

    # Lane loaded - Special handling for lane 3 (All LEDs ON)
    {% elif action == "loaded" %}
            { set_all_leds(COLORS[sp.null_color]) }
            { set_lane_leds(led_indices, COLORS["GREEN"]) }

    # Hub operations (loading/unloading)
    {% elif action in ["hub_loading", "hub_unloading"] %}
        {% for _ in range(10) %}
            { set_lane_leds(led_indices, COLORS["BLUE"]) }
            G4 P500
            { set_lane_leds(led_indices, COLORS["OFF"]) }
            G4 P500
        {% endfor %}
        { set_all_leds(COLORS["OFF"]) }

    # Extruder unloading
    {% elif action == "extruder_unloading" %}
        { set_lane_leds(led_indices, COLORS["YELLOW"]) }
        G4 P5000
        { set_all_leds(COLORS["OFF"]) }

    # Hotend or extruder loading/unloading
    {% elif action in ["hotend_loading", "hotend_unloading", "extruder_loading"] %}
        {% for _ in range(5) %}
            { set_lane_leds(prev_led_indices, COLORS["YELLOW"]) }
            { set_lane_leds(led_indices, COLORS["YELLOW"]) }
            G4 P400
            { set_lane_leds(prev_led_indices, COLORS["OFF"]) }
            { set_lane_leds(led_indices, COLORS["OFF"]) }
            G4 P400
        {% endfor %}
        { set_lane_leds(prev_led_indices, COLORS["YELLOW"]) }
        { set_lane_leds(led_indices, COLORS["YELLOW"]) }

    # Runout only
    {% elif action == "runout" %}
        { set_lane_leds(led_indices, COLORS["RED"]) }

    # Pause
    {% elif action == "pause" %}
        { set_all_leds(COLORS["PURPLE"]) }

    # Print end
    {% elif action == "print_end" %}
        {% for _ in range(10) %}
            { set_all_leds(COLORS["GREEN"]) }
            G4 P500
            { set_all_leds(COLORS["OFF"]) }
            G4 P500
        {% endfor %}
        
        {% if prev_lane > -1 %}
            { set_lane_leds(prev_led_indices, COLORS["GREEN"]) }
        {% endif %}
    {% endif %}

    # Save current lane for reference
    SAVE_VARIABLE VARIABLE=previous_lane VALUE={ lane }