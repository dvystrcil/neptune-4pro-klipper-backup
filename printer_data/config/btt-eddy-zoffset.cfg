# The MCU section only applies to the Eddy USB. For Eddy Coil you will use the MCU name of the toolboard that you connected the Eddy Coil to.
[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_45474E621B0483CA-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu # Sets the type of sensor for Klipper to read
sensor_mcu: eddy # Sets the MCU of the eddy probe tempereature sensor
min_temp: 10 # Sets the minimum tempereature for eddys tempereature sensor to operate
max_temp: 100 # Sets the maximum tempereature for eddys tempereature sensor to operate

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
#z_offset: 1.0
#i2c_address:
i2c_mcu: eddy  # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the MCU you have used.
i2c_bus: i2c0f # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the I2C bus you have used.
# Measure the offsets below using the method described here: https://www.klipper3d.org/Probe_Calibrate.html#calibrating-probe-x-and-y-offsets
# For a standard Voron stealthburner X carriage mount there should be no need to change the defaults below.
x_offset: -56.09
y_offset: 0


# This section is only relevant for Eddy USB. Comment it out for Eddy Coil.
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2.0

[bed_mesh]
horizontal_move_z: 1.1
speed: 200
# For the mesh dimensions below, the coordinates need to be reachable by the center of the probe. To calculate coordinates that will work, use the formula below:
# mesh x min = position_min_x + greater_of (15mm or x_offset) <--- in this term, only consider the x offset if it is positive, ignore if negative.
# mesh y min = position_min_y + greater_of (15mm or y_offset) <--- in this term, only consider the y offset if it is positive, ignore if negative.
# mesh x max = position_max_x - greater_of (15mm or |x_offset|) <--- in this term, only consider the x offset if it is negative, ignore if positive.
# mesh y max = position_max_y - greater_of (15mm or |y_offset|) <--- in this term, only consider the y offset if it is negative, ignore if positive.
# Example: Consider that you have a 300 x 300 bed with the max x and y positions being 300 and the min being 0. Your probe offsets are -20 for X and 10 for Y
# For mesh x min we ignore the x offset term because it is negative. Therefore mesh x min = 15
# For mesh y min we do not ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y min = 15
# For mesh x max we do not ignore the x offset term because it is negative. It is also greater than 15. Therefore mesh x max = 280
# For mesh y max we ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y max = 285
# The final result would be mesh_min: 15, 15 mesh_max: 280, 285
#mesh_min: 15, 32 # 15, 31.66 # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
#mesh_max: 201, 220 #198.84, 220.00 # 197.94, 203.44 # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
mesh_min: 15, 15 # new head
mesh_max: 197.91, 220 # new head
probe_count: 21,21 
algorithm: bicubic
zero_reference_position: 117.5,117.5
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[safe_z_home]
home_xy_position: -4, 117.5 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
z_hop: 10
z_hop_speed: 25
speed: 200

###############################Macros and related################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.

# [save_variables]
# filename: ~/printer_data/config/variables.cfg

[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.

# [delayed_gcode RESTORE_PROBE_OFFSET]
# initial_duration: 1.
# gcode:
#   {% set svv = printer.save_variables.variables %}
#   {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
#     {% set cz = svv.nvm_offset|default(0) %}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={cz}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
#     RESPOND PREFIX=btt_eddy MSG="Restoring z_offset: {cz} from nvm_offset"
#   {% endif %}

# [gcode_macro G28]
# rename_existing: G28.1
# gcode:
#   RESPOND PREFIX=btt_eddy MSG="Homing..." 
#   GET_Z_VALUES
#   G28.1 {rawparams}
#   {% if not rawparams or (rawparams and 'Z' in rawparams) %}
#     RESPOND PREFIX=btt_eddy MSG="Setting Z from probe" 
#     PROBE
#     SET_Z_FROM_PROBE
#   {% endif %}
#   GET_Z_VALUES

# [gcode_macro SET_Z_FROM_PROBE]
# gcode:
#     {% set cf = printer.configfile.settings %}
#     {% set cz = printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset %}
#     RESPOND PREFIX=btt_eddy MSG="Setting z_offset: {cz} from probe" 
#     SET_GCODE_OFFSET_ORIG Z={cz}
#     G90
#     G1 Z{cf.safe_z_home.z_hop}

# [gcode_macro Z_OFFSET_APPLY_PROBE]
# rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
# gcode:
#   {% set cz = printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset %}
#   SAVE_VARIABLE VARIABLE=nvm_offset VALUE={cz}
#   RESPOND PREFIX=btt_eddy MSG="Saving z_offset: {cz} to nvm_offset" 

[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
#   {% if params.Z_ADJUST %}
#     {% set cz = printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float %}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ cz }
#     RESPOND PREFIX=btt_eddy MSG="Adjusting Z: {cz}" 
#   {% endif %}
#   {% if params.Z %} 
#     {% set paramList = rawparams.split() %}
#     {% for i in range(paramList|length) %}
#       {% if paramList[i]=="Z=0" %}
#         RESPOND PREFIX=btt_eddy MSG="Found paramerter Z=0" 
#         {% set temp=paramList.pop(i) %}
#         {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
#         RESPOND PREFIX=btt_eddy MSG="Exchanging with Z_ADJUST with: {temp}" 
#         {% if paramList.append(temp) %}{% endif %}
#         RESPOND PREFIX=btt_eddy MSG="dump paramList" 
#         {% for i in range(paramList|length) %}
#           RESPOND PREFIX=btt_eddy MSG="... {paramList[i]}"
#         {% endfor %}
#       {% endif %}
#     {% endfor %}
#     {% set rawparams=paramList|join(' ') %}
#     SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
#     RESPOND PREFIX=btt_eddy MSG="Setting runtime_offset to 0"
#   {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }

[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}

#################################################################################
## My probe macros

[gcode_macro GET_BED_MESH]
gcode:
  G28
  BED_MESH_CALIBRATE METHOD=rapid_scan

[gcode_macro GET_Z_VALUES]
gcode:
  {% set cf = printer.configfile.settings %}
  RESPOND PREFIX=btt_eddy MSG="last_z_result {printer.probe.last_z_result}"
  RESPOND PREFIX=btt_eddy MSG="z_offset {cf['probe_eddy_current btt_eddy'].z_offset}"
  RESPOND PREFIX=btt_eddy MSG="runtime_offset {printer['gcode_macro SET_GCODE_OFFSET'].runtime_offset}"
  {% set cz = printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset %}
  RESPOND PREFIX=btt_eddy MSG="Z is {cz}"